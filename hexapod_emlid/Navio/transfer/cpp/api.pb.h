// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_api_2eproto__INCLUDED
#define PROTOBUF_api_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ch {
namespace sharpsoft {
namespace hexapod {
namespace transfer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_api_2eproto();
void protobuf_AssignDesc_api_2eproto();
void protobuf_ShutdownFile_api_2eproto();

class IMU;

// ===================================================================

class IMU : public ::google::protobuf::Message {
 public:
  IMU();
  virtual ~IMU();

  IMU(const IMU& from);

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMU& default_instance();

  void Swap(IMU* other);

  // implements Message ----------------------------------------------

  inline IMU* New() const { return New(NULL); }

  IMU* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional float ax = 2;
  void clear_ax();
  static const int kAxFieldNumber = 2;
  float ax() const;
  void set_ax(float value);

  // optional float ay = 3;
  void clear_ay();
  static const int kAyFieldNumber = 3;
  float ay() const;
  void set_ay(float value);

  // optional float az = 4;
  void clear_az();
  static const int kAzFieldNumber = 4;
  float az() const;
  void set_az(float value);

  // optional float gx = 5;
  void clear_gx();
  static const int kGxFieldNumber = 5;
  float gx() const;
  void set_gx(float value);

  // optional float gy = 6;
  void clear_gy();
  static const int kGyFieldNumber = 6;
  float gy() const;
  void set_gy(float value);

  // optional float gz = 7;
  void clear_gz();
  static const int kGzFieldNumber = 7;
  float gz() const;
  void set_gz(float value);

  // optional float mx = 8;
  void clear_mx();
  static const int kMxFieldNumber = 8;
  float mx() const;
  void set_mx(float value);

  // optional float my = 9;
  void clear_my();
  static const int kMyFieldNumber = 9;
  float my() const;
  void set_my(float value);

  // optional float mz = 10;
  void clear_mz();
  static const int kMzFieldNumber = 10;
  float mz() const;
  void set_mz(float value);

  // @@protoc_insertion_point(class_scope:ch.sharpsoft.hexapod.transfer.IMU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  float ax_;
  float ay_;
  float az_;
  float gx_;
  float gy_;
  float gz_;
  float mx_;
  float my_;
  float mz_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
  static IMU* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IMU

// optional int64 timestamp = 1;
inline void IMU::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IMU::timestamp() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.timestamp)
  return timestamp_;
}
inline void IMU::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.timestamp)
}

// optional float ax = 2;
inline void IMU::clear_ax() {
  ax_ = 0;
}
inline float IMU::ax() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.ax)
  return ax_;
}
inline void IMU::set_ax(float value) {
  
  ax_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.ax)
}

// optional float ay = 3;
inline void IMU::clear_ay() {
  ay_ = 0;
}
inline float IMU::ay() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.ay)
  return ay_;
}
inline void IMU::set_ay(float value) {
  
  ay_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.ay)
}

// optional float az = 4;
inline void IMU::clear_az() {
  az_ = 0;
}
inline float IMU::az() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.az)
  return az_;
}
inline void IMU::set_az(float value) {
  
  az_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.az)
}

// optional float gx = 5;
inline void IMU::clear_gx() {
  gx_ = 0;
}
inline float IMU::gx() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.gx)
  return gx_;
}
inline void IMU::set_gx(float value) {
  
  gx_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.gx)
}

// optional float gy = 6;
inline void IMU::clear_gy() {
  gy_ = 0;
}
inline float IMU::gy() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.gy)
  return gy_;
}
inline void IMU::set_gy(float value) {
  
  gy_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.gy)
}

// optional float gz = 7;
inline void IMU::clear_gz() {
  gz_ = 0;
}
inline float IMU::gz() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.gz)
  return gz_;
}
inline void IMU::set_gz(float value) {
  
  gz_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.gz)
}

// optional float mx = 8;
inline void IMU::clear_mx() {
  mx_ = 0;
}
inline float IMU::mx() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.mx)
  return mx_;
}
inline void IMU::set_mx(float value) {
  
  mx_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.mx)
}

// optional float my = 9;
inline void IMU::clear_my() {
  my_ = 0;
}
inline float IMU::my() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.my)
  return my_;
}
inline void IMU::set_my(float value) {
  
  my_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.my)
}

// optional float mz = 10;
inline void IMU::clear_mz() {
  mz_ = 0;
}
inline float IMU::mz() const {
  // @@protoc_insertion_point(field_get:ch.sharpsoft.hexapod.transfer.IMU.mz)
  return mz_;
}
inline void IMU::set_mz(float value) {
  
  mz_ = value;
  // @@protoc_insertion_point(field_set:ch.sharpsoft.hexapod.transfer.IMU.mz)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace transfer
}  // namespace hexapod
}  // namespace sharpsoft
}  // namespace ch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2eproto__INCLUDED
